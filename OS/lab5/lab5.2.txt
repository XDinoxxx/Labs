#include <pthread.h> 
#include <iostream> 
 
using namespace std; 
 
# define N 25  
int a[N]; 
pthread_mutex_t mutex; // объявляем мьютекс 
 
// функция потока  
void * ThreadFunc(void *) { 
    int pause; 
    pthread_mutex_lock(&mutex); // блокируем мьютекс 
    for (int i=0; i<N; i++) {         
        cout << " " << a[i] << " "; 
        for (long j=0; j<1000000; j++) pause++;  
    } 
 
    cout << endl;
    pthread_mutex_unlock(&mutex); // разблокируем мьютекс 
    return 0; 
} 
 
int main(void) { 
    pthread_t Thread; 
    int pause; 
    int res
    // заполняем глобальный массив  
    for (int i=0; i<N; i++)  
        a[i]=i; 

    pthread_mutex_init(&mutex, NULL); // инициализируем мьютекс 
 
    res=pthread_create(&Thread,NULL,ThreadFunc,NULL); 
 
    if (res !=0) { 
        cerr << "Ошибка при создании потока" << endl; 
        cin.get(); 
        return 0; 
    } 
    pthread_mutex_lock(&mutex); // блокируем мьютекс
    for (int i=0; i<N; i++) {      
        cout << " " << a[i] << " "; 
        for (long j=0; j<1000000; j++) pause++;  
    } 
    cout << endl; 

    pthread_mutex_unlock(&mutex); // разблокируем мьютекс
    
    // дожидаемся завершения работы потока  
    pthread_join(Thread, NULL); 

    pthread_mutex_destroy(&mutex); // освобождаем ресурсы мьютекса 

    return 0; 
}
