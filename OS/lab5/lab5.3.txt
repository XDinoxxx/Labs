#include <pthread.h> 
#include <iostream> 
#include <semaphore.h> // добавляем для использования семафоров
 
using namespace std; 
 
# define N 25  
int a[N]; 
 
// объявляем семафор 
sem_t semaphore; 
 
// функция потока  
void * ThreadFunc(void *) { 
    int pause; 
 
    // ожидаем разрешения от семафора 
    sem_wait(&semaphore); 
 
    for (int i=0; i<N; i++) { 
        cout << " " << a [ i] < < " "; 
        // замедляем вывод для наглядности  
        for (long j=0; j<1000000; j++) pause++; 
    } 
 
    cout << endl; 
    return 0; 
 
} 
 
int main(void) { 
    pthread_t Thread; 
    int pause; 
    int res; 
    // заполняем глобальный массив  
    for (int i=0; i<N; i++)  
 a[i]=i; 
    // инициализируем семафор с начальным значением 0 
    sem_init(&semaphore, 0, 0); 
 
    res=pthread_create(&Thread,NULL,ThreadFunc,NULL); 
 
    if (res !=0) { 
        cerr << "Ошибка при создании потока" << endl; 
        cin.get(); 
        return 0; 
    } 
 
    for (int i=0; i<N; i++) { 
        cout << " " << a[i] << " "; 
        for (long j=0; j<1000000; j++)  
      pause++; 
    } 
 
    cout < < endl; 
    // разрешаем выполнение потока 
    sem_post(&semaphore); 
    // дожидаемся завершения работы потока  
    pthread_join(Thread, NULL); 
    return 0; 
}
