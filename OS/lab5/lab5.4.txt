#include <iostream>
#include <pthread.h>
#include <unistd.h>
#include <semaphore.h>

using namespace std;

const int N = 10; // количество дикарей
const int M = 5; // количество кусков миссионера
sem_t pot; // семафор горшка
sem_t chef; // семафор повара

void* eat(void* arg) {
    int id = *(int*)arg;

    while (true) {
        sem_wait(&pot); // забираем кусок
        cout << "Дикарь " << id+1 << " обедает." << endl;
        sleep(1); // время на поедание
        sem_post(&chef); // вызываем повара
        sem_wait(&pot); // ждем, пока горшок будет наполнен
    }
}

void* cook(void* arg) {
    while (true) {
        sem_wait(&chef); // ждем дикарей
        cout << "Повар готовит обед." << endl;
        sleep(2); // время на приготовление
        for (int i = 0; i < M; i++)
            sem_post(&pot); // наполняем горшок
        cout << "Обед готов. Горшок наполнен." << endl;
    }
}

int main() {
    pthread_t eat_threads[N], cook_thread;

    sem_init(&pot, 0, M); // инициализация горшка
    sem_init(&chef, 0, 0); // инициализация повара

    int ids[N];
    for (int i = 0; i < N; i++)
        ids[i] = i;

    pthread_create(&cook_thread, NULL, cook, NULL); // запускаем повара
    for (int i = 0; i < N; i++)
        pthread_create(&eat_threads[i], NULL, eat, (void*)&ids[i]); // запускаем дикарей

    for (int i = 0; i < N; i++)
        pthread_join(eat_threads[i], NULL); // ожидаем завершения дикарей
    pthread_join(cook_thread, NULL); // ожидаем завершения повара

    sem_destroy(&pot); // удаляем семафор горшка
    sem_destroy(&chef); // удаляем семафор повара

    return 0;
}
 